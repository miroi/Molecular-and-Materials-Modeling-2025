---------------------------------------------------------------------------------------------
TASK 1: Calculate Total Energy (QE)

Step 1.1: Run the SCF Calculation
/path/to/qe/bin/pw.x < Si.in > Si.out
(if using a parallel version, invoke it by mpirun -np # /path/to/qe/bin/pw.x < Si.in > Si.out)

Step 1.2: Check Convergence
Verify if the calculation converged successfully:
grep "JOB DONE." Si.out       # Check for completion
grep "convergence has been achieved" Si.out  # Check SCF convergence

Step 1.3: Extract Total Energy
To get the final total energy (in Ry):
grep ! Si.out
(Output example: !    total energy              =     -16.73649303 Ry)
---------------------------------------------------------------------------------------------
TASK 2: Automated Cutoff and K-points Convergence Test (ASE)

In convergence testing, we systematically increase two key parameters separately (not simultaneously): (1) Plane-wave cutoff energy (ecutwfc) (2) K-points grid density (K_POINTS). The goal is to find the point where the total energy stabilizes (saturates) with respect to further changes in these parameters. It can be done manually by running multiple SCF calculations (as in TASK 1) and comparing energies at each step. However the current task uses a ASE python script (convergence_test_si.py) to automate the process. All necessary parameters are already pre-configured in the script, including: (1) QE SCF input parameters (2) Atomic structure of silicon (3) Convergence test logic. Only one modification is required: Replace the QE executable path with your local pw.x location in the script.

The convergence script uses three key parameters to automate testing:
(1) ecutwfc_values = np.arange(20, 120, 5)  # Tests cutoffs from 20 to 120 Ry in steps of 5 Ry. Determines the range of plane-wave cutoff energies to test.
(2) kpoints_values = [(k,k,k) for k in range(2, 25)]  # Tests k-grids from (2×2×2) to (25×25×25). Purpose: Defines the k-point meshes to evaluate.
(3) energy_tol = 0.01 # Sets the convergence threshold (0.01 meV/atom). The script stops when energy changes between steps are smaller than this tolerance.

Adjust ranges (e.g., np.arange(20, 80, 10)), and higher tolerance (e.g. 0.05) for quicker testing.

Step 2.1: Run the ASE job
python3 convergence_test_si.py > convergence_test_si.out

TASK 2.2: Further Considerations:
Run a final QE SCF calculation with your converged ecutwfc and kpoints (similar to TASK 1), along with tstress = .true. and tprnfor = .true. in the input file (under &CONTROL) to compute stress and atomic forces and inspect the output.

Note: When performing a series of calculations, ASE automatically overwrites the Quantum ESPRESSO output (.pwo) and input (.pwi) files after each step. This means only the files from the final calculation cycle are preserved, which should contain the results of the fully relaxed structure. How many different SCF calculations did ASE run to converge cutoff energy / K-points grid in this task? 
---------------------------------------------------------------------------------------------
TASK 3: Cell relaxation (ASE+QE)

In this task, we will relax the silicon experimental unit cell to determine its ground state structure, allowing both lattice parameters and atomic positions to adjust freely. Given that we're starting from a well-defined experimental structure, only minor changes are expected during the relaxation process. We will perform this using two distinct methods: direct relaxation through QE and by ASE using QE as calculator.

Step 3.1: Direct QE
/path/to/qe/bin/qe-7.4.1/bin/pw.x < cell_relaxation_si.in > cell_relaxation_si.out

Step 3.2: ASE
ASE: python3 cell_relaxation_si.py > cell_relaxation_si.out (Replace the QE executable path with your local pw.x location in the script)

When using QE directly, the calculation type must be set to 'vc-relax', requiring both the &IONS and &CELL NAMELISTs in the input file. QE's relaxation convergence is controlled by thresholds like etot_conv_thr and forc_conv_thr in the &CONTROL NAMELIST, which default to specific values if not specified (in this example we did not, so check the pw.x manual what those values are. ASE, on the other hand, employs QE as a calculator to perform a series of SCF calculations, using the calculated energies and forces to optimize the structure through its own BFGS implementation. While both methods utilize the BFGS algorithm, slight differences may appear in the final structures due to variations in their implementations (such as minimizing max force vs norm) and different threshold values. After completing both relaxations, carefully compare the resulting forces, pressure, energy, lattice parameters, and atomic coordinates in both runs. For a properly relaxed structure, the stress should remain within ±50 kbar and forces should be negligible, how are your results?

Note: ASE automatically saves the complete relaxation history in the trajectory file (relaxation.traj). You can visualize the step-by-step structural evolution using ASE's GUI by loading this trajectory file. This allows you to track how the atomic positions and cell parameters change throughout the optimization process. To view it, simply run: ase gui relaxation.traj 
This will display all relaxation steps interactively, showing the convergence toward the final optimized structure.
---------------------------------------------------------------------------------------------
TASK 3: Electronic properties: 1 (ASE)